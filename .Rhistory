points(notmay$Wind,may$Ozone,col="red",pch=19)
points(notmay$Wind,notmay$Ozone,col="red",pch=19)
(notmay$Wind,notmay$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend(topright,pch=c(17,8),col=c("blue","red""),legend=c("May","Other Months""))
legend(topright,pch=c(17,8),col=c("blue","red""),legend=c("May","Other Months""))
legend(topright,pch=c(17,8),col=c("blue","red""),legend=c("May","Other Months"))
legend(topright,pch=c(17,8),col=c("blue","red),legend=c("May","Other Months"))
legend(topright,pch=c(17,8),col=c("blue","red"))
legend(topright,pch=c(17,8),col=c("blue","red),legend=c("May","Other Months"))
1
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
1
abline(v=median(airquality$Wind),lty=2,lwd=2)
1
par(mfrow=c(1,2))
1
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
1
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
1
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
2
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
2
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
4
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
5
mtext("Ozone and Weather in New York City", outer = TRUE)
library("swirl")
swirl()
head(airquality)
xyplot(Ozone~Wind,data = airquality)
xyplot(Ozone~Wind,data = airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[['x.limits']]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
2
source(pathtofile("plot1.R"),local=TRUE)
5
myedit("plot2.R")
5
source(pathtofile("plot2.R"),local=TRUE)
3
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
pathtofile("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
t
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
2
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
2
sample(colors(),10)
f
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
d
1
p1 <- colorRampPalette(c("red","blue"))
4
p1(2)
4
p1(6)
45
1
0xcC
4
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
3
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?func_of_newvar_equals
?rgb
2
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
4
plot(x,y,pch=19,col=rgb(0,.5,.5))
3
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
3
cols <- brewer.pal(3, "BuGn")
2
showMe(cols)
4
pal <- colorRampPalette(cols)
5
showMe(pal(20))
7
image(volcano, col = pal(20))
7
image(volcano, col = p1(20))
4
str(mpg)
7
qplot(displ, hwy, data = mpg)
2
qplot(displ, hwy, data = mpg, color = drv)
2
qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))
4
qplot(y=hwy, data = mpg, color = drv)
1
myhigh
3
qplot(drv,hwy,data=mpg,geom="boxplot")
2
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
2
qplot(hwy, data = mpg, fill = drv)
3
qplot(displ, hwy, data = mpg, facets = . ~ drv)
5
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
4
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
4
g <- ggplot(mpg, aes(displ,hwy) )
summary
(g)
summary(g)
d4
4
g+geom_point()
3
g+geom_point()+geom_smooth()
5
g+geom_point()+geom_smooth(method="lm")
7
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
1
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
5
g+geom_point(color="pink",size=4,alpha=1/2)
8
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
9
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement",y="Hwy Mileage")
7
g + geom_point(aes(color = drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +  | geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
7
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
1
plot(myx, myy, type = "l", ylim = c(-3,3))
6
g <- ggplot(testdat, aes(x = myx, y = myy))
2
g + geom_line()
1
g + geom_line() + ylim(-3,3)
8
g + geom_line() + coord_cartesian(ylim=c(-3,3))
8
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
2
g + geom_point()
3
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
1
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
2
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="HighwayMileage",title="Swirl Rules!")
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
5
qplot(price,data=diamonds)
2
range(diamonds$price)
4
qplot(price,data=diamonds,binwidth=18497/30)
5
brk
4
counts
1
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
3
qplot(price,data=diamonds,geom="density")
4
qplot(price,data=diamonds,geom="density",color=cut)
4
qplot(carat,price,data=diamonds)
5
qplot(carat,price,data=diamonds, shape=cut)
6
qplot(carat,price,data=diamonds, color=cut)
1
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
1
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
2
g <- ggplot(diamonds,aes(depth,price))
summary(g)
4
g+geom_point(alpha=1/3)
3
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
4
cutpoints
a
1
diamonds$car2 <- cut(diamonds$carat,cutpoints)
4
g <- ggplot(diamonds,aes(depth,price))
3
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
4
diamonds[myd,]
2
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
1
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library("swirl")
swirl()
swirl()
install.packages("dplyr")
swirl()
library("dplyr")
install_course("Getting and Cleaning Data")
swirl()
2
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
1
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country,r_arch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
1
select(cran, -(X:size))
1
filter(cran, package == "swirl")
1
filter(cran, r_version == "3.1.1", country == "US")
2
?Comparison
2
filter(cran, r_version <= "3.0.2", country == "IN")
2
filter(cran, country == "US" | country == "IN")
1
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
1
!is.na(c(3, 5, NA, 10))
1
filter(cran, !is.na(r_version))
1
select(cran, size:ip_id)
cran2<-select(cran, size:ip_id)
2
arrange(cran2, ip_id)
2
arrange(cran2, desc(ip_id))
3
arrange(cran2, package, ip_id)
4
arrange(cran2, country, desc(r_version), ip_id)
4
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
1
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
5
mutate(cran3, correct_size = size + 1000)
5
summarize(cran, avg_bytes = mean(size))
1
library(dplyr)
4
cran <- tbl_df(mydf)
6
rm("mydf")
cran
group_by()
?group_by
1
by_package<-group_by(cran, package)
by_package
1
summarize(by_package ,mean(size))
3
reset()
swirl()
?n
?n_district
submit()
submit()
tbl , packsum
tbl
pack_sum
3
quantile(pack_sum$count, probs = 0.99)
6
top_counts<-filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
3
top_counts_sorted<-arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
1
quantile(pack_sum$unique, probs = 0.99)
2
filter(pack_sum, unique > 465)
5
yop_unique<-filter(pack_sum, unique > 465)
top_unique<-filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
4
top_unique_sorted<- arrange(top_unique, desc(unique))
top_unique_sorted
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
1
submit()
submit
submit()
submit()
submit()
cran
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
student2
students2
4
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res,col=sex_class, into =c("sex,"class"))
separate(data=res,col=sex_class, into =c("sex,"class"))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit
submit()
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate("status")
2
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
1
bind_rows(passed,failed)
3
sat
submit()
submit()
getwd()
setwd("Coursera")
setwd("RepData_PeerAssessment1")
##As requested we need to set the default of echo to be true.
library(knitr)
opts_chunk$set(echo = TRUE)
##Loading required libraries
library(dplyr)
library(lubridate)
library(ggplot2)
## Loading and preprocessing the data (Point 1 of assignment)
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
## Process/transform the data (if necessary) into a format suitable for your analysis
data <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character", "integer"))
data$date <- ymd(data$date)
## We can check the data with str() and head() for confirmation.
str(data)
head(data)
## What is mean total number of steps taken per day?
## We use dplyr to calculate total number of steps per day and group by dates.
steps <- data %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
print
## Create histogram (Point 2 of assignment)
ggplot(steps, aes(x = steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
## Calculating Mean and Median (Point 3 of assignment)
mean_steps <- mean(steps$steps, na.rm = TRUE)
median_steps <- median(steps$steps, na.rm = TRUE)
median_steps
## [1] 10765
mean_steps
## [1] 10766.19
Mean steps are 10766.19 and median steps are 10765.
## What is the average daily activity pattern?
## Lets first calculated the average number of steps taken in each 5 minute interval using dplyr and group by interbal
interval <- data %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
## Now we can use ggplot for the 5 minute interval and average steps taken time series. (Point 4 of Assignment)
ggplot(interval, aes(x=interval, y=steps)) +
geom_line(color = "firebrick")
## The 5-minute interval that, on average, contains the maximum number of steps (Point 5 of assignment)
interval[which.max(interval$steps),]
## Imputing missing values (Point 6 of assignment)
## First lets sum all missing values
sum(is.na(data$steps))
## [1] 2304
## so we have 2304 missing values
## we will fill these missing values with the average number of steps in the same 5 minute interval.
data_full <- data
nas <- is.na(data_full$steps)
avg_interval <- tapply(data_full$steps, data_full$interval, mean, na.rm=TRUE, simplify=TRUE)
data_full$steps[nas] <- avg_interval[as.character(data_full$interval[nas])]
##Check that there are no missing values:
## we can confirm that there are no missing values in the new dataset we created.
sum(is.na(data_full$steps))
## [1] 0
## so there are no missing values now.
## Now Lets Calculate the number of steps taken in each 5-minute interval per day using dplyr and group by interval. Use ggplot for making the histogram:
steps_full <- data_full %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
print
##Histogram of the total number of steps taken each day after missing values are imputed (Point 7 of assignment)
ggplot(steps_full, aes(x = steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day, including missing values", x = "Steps per day", y = "Frequency")
mean_steps_full <- mean(steps_full$steps, na.rm = TRUE)
mean_steps_full
## [1] 10766.19
median_steps_full <- median(steps_full$steps, na.rm = TRUE)
median_steps_full
## [1] 10766.19
## Are there differences in activity patterns between weekdays and weekends?
data_full <- mutate(data_full, weektype = ifelse(weekdays(data_full$date) == "Saturday" | weekdays(data_full$date) == "Sunday", "weekend", "weekday"))
data_full$weektype <- as.factor(data_full$weektype)
head(data_full)
## Lets Calculate the average steps in the 5-minute interval and use ggplot for making the time series of the 5-minute interval for weekday and weekend, and compare the average steps:
interval_full <- data_full %>%
group_by(interval, weektype) %>%
summarise(steps = mean(steps))
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow=2)
print(s)
knit("PA1_template.Rmd")
install.packages("httpuv")
install.packages("caTools")
knit("RepData_PeerAssessment1")
knit("PA1_template.Rmd")
